import streamlit as st
import pandas as pd
from streamlit_folium import folium_static
import folium
import plotly.graph_objs as go
import plotly.express as px
from folium.plugins import MarkerCluster, HeatMap, Fullscreen, Draw
import pandas as pd
from streamlit_extras.metric_cards import style_metric_cards

# Thi·∫øt l·∫≠p chi·ªÅu r·ªông
st.set_page_config(page_title="Ph√¢n T√≠ch Kinh Doanh", page_icon="üîÜ", layout="wide")  

# T·∫£i CSS Style
with open('style.css') as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

st.markdown(
 """
 <style>
    [data-testid=stSidebar] {
         color: white;
         text-size:24px;
    }
</style>
""", unsafe_allow_html=True
)

# T·∫£i d·ªØ li·ªáu m·ªõi
load_df = pd.read_csv('sales_data_group.csv')

# Logo
st.sidebar.image("img/logo.png", caption="")

# Multi-select ƒë·ªÉ l·ªçc theo Outlet Identifier
name = st.sidebar.multiselect(
    "CH·ªåN OUTLET",
    options=load_df["Outlet_Identifier"].unique(),
    default=load_df["Outlet_Identifier"].unique(),
)
df = load_df.query("Outlet_Identifier == @name")

# Ph·∫ßn ph√¢n t√≠ch
try:
    st.header("XU H∆Ø·ªöNG KINH DOANH THEO GEO-REFERENCING")
    items = df['Outlet_Identifier'].count()
    total_sales = float(df['Item_Outlet_Sales'].sum())
    total_mrp = df['Item_MRP'].sum()  # T·ªïng gi√° tr·ªã Item_MRP
    unique_item_types = df['Item_Type_Count'].unique()  # S·ªë l∆∞·ª£ng lo·∫°i s·∫£n ph·∫©m duy nh·∫•t
    with st.expander("PH√ÇN T√çCH"):
        a1, a2 = st.columns(2)
        a1.metric(label="S·ªë L∆∞·ª£ng Outlet", value=items, help=f"T·ªïng Doanh Thu: {total_sales}", delta=total_sales)
        a2.metric(label="S·ªë Lo·∫°i s·∫£n ph·∫©m", value=unique_item_types, help=f"T·ªïng Item_MRP: {total_mrp}", delta=total_mrp)
        style_metric_cards(background_color="#FFFFFF", border_left_color="#00462F", border_color="#070505", box_shadow="#F71938")

    # T·∫°o b·∫£n ƒë·ªì
    m = folium.Map(location=[df['Latitude'].mean(), df['Longitude'].mean()], zoom_start=4)

    marker_cluster = MarkerCluster().add_to(m)
    for i, row in df.iterrows():
        popup_content = f"""
          <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
          <ul class="list-group">
          <h3>Th√¥ng tin c·ªßa {row['Outlet_Identifier']}</h3>
          <hr class='bg-danger text-primary'>
          <div style='width:400px;height:200px;margin:10px;color:gray;text-size:18px;'>
          <li class="list-group-item"><b>Lo·∫°i Outlet:</b> {row['Outlet_Type']}</li>
          <li class="list-group-item"><b>Lo·∫°i ƒê·ªãa ƒêi·ªÉm:</b> {row['Outlet_Location_Type']}<br></li>
          <li class="list-group-item"><b>K√≠ch Th∆∞·ªõc:</b> {row['Outlet_Size']}<br></li>
          <li class="list-group-item"><b>MRP:</b> {row['Item_MRP']}<br></li>
          <li class="list-group-item"><b>Doanh Thu:</b> {row['Item_Outlet_Sales']}<br></li>
          <li class="list-group-item"><h4>Kinh ƒê·ªô: {row['Longitude']}</h4></li>
          <li class="list-group-item"><h4>Vƒ© ƒê·ªô: {row['Latitude']}</h4></li>"""
        folium.Marker(
            location=[row['Latitude'], row['Longitude']],
            tooltip=row['Outlet_Identifier'],
            icon=folium.Icon(color='red', icon='fa-dollar-sign', prefix='fa'),
        ).add_to(marker_cluster).add_child(folium.Popup(popup_content, max_width=600))  

    # L·ªõp Heatmap
    heat_data = [[row['Latitude'], row['Longitude']] for i, row in df.iterrows()]
    HeatMap(heat_data).add_to(m)

    # ƒêi·ªÅu khi·ªÉn To√†n M√†n H√¨nh
    Fullscreen(position='topright', title='To√†n M√†n H√¨nh', title_cancel='Tho√°t To√†n M√†n H√¨nh').add_to(m)

    # C√¥ng c·ª• V·∫Ω
    draw = Draw(export=True)
    draw.add_to(m)

    def add_google_maps(m):
        tiles = "https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}"
        attr = "Google Digital Satellite"
        folium.TileLayer(tiles=tiles, attr=attr, name=attr, overlay=True, control=True).add_to(m)
        # Th√™m nh√£n cho ƒë∆∞·ªùng ph·ªë v√† c√°c ƒë·ªëi t∆∞·ª£ng
        label_tiles = "https://mt1.google.com/vt/lyrs=h&x={x}&y={y}&z={z}"
        label_attr = "Google Labels"
        folium.TileLayer(tiles=label_tiles, attr=label_attr, name=label_attr, overlay=True, control=True).add_to(m)
       
        return m

    with st.expander("XEM B·∫¢N ƒê·ªí V√Ä PH√ÇN T√çCH"):
        m = add_google_maps(m)
        m.add_child(folium.LayerControl(collapsed=False))
        folium_static(m, width=1350, height=600)
        folium.LayerControl().add_to(m)  # Th√™m ƒëi·ªÅu khi·ªÉn l·ªõp ƒë·ªÉ chuy·ªÉn ƒë·ªïi c√°c l·ªõp kh√°c nhau

    # Hi·ªÉn th·ªã d·ªØ li·ªáu b·∫£ng khi di chu·ªôt qua m·ªôt ƒë√°nh d·∫•u
    with st.expander("CH·ªåN D·ªÆ LI·ªÜU"):
        selected_outlet = st.selectbox("Ch·ªçn m·ªôt Outlet", df['Outlet_Identifier'])
        selected_row = df[df['Outlet_Identifier'] == selected_outlet].squeeze()
        # Hi·ªÉn th·ªã th√¥ng tin b·ªï sung trong b·∫£ng
        st.table(selected_row)

    # Bi·ªÉu ƒë·ªì
    col1, col2 = st.columns(2)
    with col1:
        fig2 = go.Figure(
            data=[go.Bar(x=df['Outlet_Identifier'], y=df['Item_MRP'])],
            layout=go.Layout(
                title=go.layout.Title(text="T·ªïng Item_MRP Theo Outlet"),
                plot_bgcolor='rgba(0, 0, 0, 0)',  # ƒê·∫∑t m√†u n·ªÅn bi·ªÉu ƒë·ªì th√†nh trong su·ªët
                paper_bgcolor='rgba(0, 0, 0, 0)',  # ƒê·∫∑t m√†u n·ªÅn gi·∫•y th√†nh trong su·ªët
                xaxis=dict(showgrid=True, gridcolor='#AED6F1'),  # Hi·ªÉn th·ªã l∆∞·ªõi tr·ª•c x v√† ƒë·∫∑t m√†u c·ªßa n√≥
                yaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Hi·ªÉn th·ªã l∆∞·ªõi tr·ª•c y v√† ƒë·∫∑t m√†u c·ªßa n√≥
                font=dict(color='#cecdcd'),  # ƒê·∫∑t m√†u ch·ªØ th√†nh ƒëen
             )
        )
        st.plotly_chart(fig2, use_container_width=True)

    with col2:
        # T·∫°o bi·ªÉu ƒë·ªì donut
        fig = px.pie(df, values='Item_Outlet_Sales', names='Outlet_Identifier', title='Ph√¢n Ph·ªëi Doanh Thu Theo Outlet')
        fig.update_traces(hole=0.4)  # ƒê·∫∑t k√≠ch th∆∞·ªõc l·ªó ·ªü gi·ªØa cho bi·ªÉu ƒë·ªì donut
        fig.update_layout(width=800)
        st.plotly_chart(fig, use_container_width=True)
  
except Exception as e:
    st.error(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu: {e}")
